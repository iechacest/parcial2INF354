# -*- coding: utf-8 -*-
"""ejercicio3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JPLKBxW3Gj_feRDxmzv_2YUDrfkcqeOq
"""

import sqlite3
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import StandardScaler

class AgenteInteligente:
    def __init__(self, db_name=":memory:"):
        self.conn = sqlite3.connect(db_name)
        self.cursor = self.conn.cursor()
        self._crear_tablas()
        self.insertar_datos()

    def _crear_tablas(self):
        """Crea las tablas necesarias en la base de datos."""
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS Producto (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nombre TEXT,
            precio REAL,
            categoria TEXT,
            descripcion TEXT
        )
        ''')
        self.conn.commit()

    def insertar_datos(self):
        """Inserta algunos datos de ejemplo en la base de datos."""
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Laptop X1', 1000, 'Electrónica', 'Laptop potente con procesador Intel')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Smartphone Y2', 500, 'Electrónica', 'Smartphone con cámara de alta calidad')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Cámara Z3', 300, 'Electrónica', 'Cámara con resolución 4K')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Tablet A4', 450, 'Electrónica', 'Tablet con pantalla táctil de 10 pulgadas')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Camiseta Azul', 25, 'Ropa', 'Camiseta de algodón, talla M, color azul')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Pantalones Slim', 40, 'Ropa', 'Pantalones de mezclilla, talla L, color negro')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Silla Gamer X', 200, 'Hogar', 'Silla ergonómica con ajuste lumbar')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Cafetera Z5', 50, 'Hogar', 'Cafetera de 1.5 litros, con temporizador')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Leche Orgánica', 2.5, 'Alimentos', 'Leche orgánica, 1 litro')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Arroz Integral', 1.8, 'Alimentos', 'Arroz integral, 1 kg')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Televisor 55\" QLED', 1500, 'Electrónica', 'Televisor 4K, pantalla QLED de 55 pulgadas')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Zapatillas Running', 60, 'Ropa', 'Zapatillas deportivas, talla 42, color gris')")
        self.conn.commit()

    def insertar_datos_ampliados(self):
        """Inserta más productos en la base de datos en la categoría 'Ropa'."""
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Camiseta Negra', 30, 'Ropa', 'Camiseta de algodón, talla M, color negro')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Polera Gris', 35, 'Ropa', 'Polera de manga larga, talla L, color gris')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Pantalones Cargo', 45, 'Ropa', 'Pantalones cargo, talla XL, color verde')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Pantalones Cortos', 20, 'Ropa', 'Pantalones cortos, talla M, color azul')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Camiseta Deportiva', 25, 'Ropa', 'Camiseta de deporte, talla L, color rojo')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Sudadera con Capucha', 40, 'Ropa', 'Sudadera con capucha, talla M, color negro')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Chaqueta Impermeable', 60, 'Ropa', 'Chaqueta impermeable, talla L, color azul')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Short Deportivo', 30, 'Ropa', 'Short deportivo, talla S, color amarillo')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Jeans Slim', 50, 'Ropa', 'Jeans de corte slim, talla M, color azul')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Camiseta Polo', 35, 'Ropa', 'Camiseta estilo polo, talla L, color blanco')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Pantalones Vaqueros', 55, 'Ropa', 'Pantalones vaqueros, talla L, color negro')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Chándal Deportivo', 45, 'Ropa', 'Chándal de entrenamiento, talla M, color rojo')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Chaqueta de Cuero', 100, 'Ropa', 'Chaqueta de cuero, talla L, color marrón')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Pantalones Jogger', 35, 'Ropa', 'Pantalones jogger, talla M, color gris oscuro')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Polera Básica', 18, 'Ropa', 'Polera básica, talla S, color blanco')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Camiseta Rayas', 28, 'Ropa', 'Camiseta con rayas, talla M, color azul y blanco')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Pantalones de Tela', 48, 'Ropa', 'Pantalones de tela ligera, talla XL, color beige')")
        self.cursor.execute("INSERT INTO Producto (nombre, precio, categoria, descripcion) VALUES ('Bermuda Verano', 22, 'Ropa', 'Bermuda para verano, talla L, color rojo')")
        self.conn.commit()

    def obtener_productos(self):
        """Obtiene los productos desde la base de datos y los carga en un DataFrame."""
        self.cursor.execute("SELECT * FROM Producto")
        productos = self.cursor.fetchall()
        return pd.DataFrame(productos, columns=["id", "nombre", "precio", "categoria", "descripcion"])

    def buscar_producto_por_palabras(self, termino_busqueda):
        """Busca productos que contengan todas las palabras clave en su nombre y dentro de la misma categoría."""
        # Divide el término de búsqueda en palabras (todas minúsculas para evitar problemas de mayúsculas/minúsculas)
        palabras_busqueda = termino_busqueda.lower().split()
        # Obtener todos los productos
        df = self.obtener_productos()
        # Filtrar productos que contengan todas las palabras clave en su nombre
        def contiene_palabras(producto_nombre):
            return all(palabra in producto_nombre.lower() for palabra in palabras_busqueda)

        df_filtrado = df[df['nombre'].apply(contiene_palabras)]

        # Si no se encuentran productos, retornamos None
        if df_filtrado.empty:
            print(f"No se encontraron productos con el nombre '{termino_busqueda}'.")
            return None

        # Ordenar los productos por relevancia (cantidad de palabras clave que coinciden en el nombre)
        df_filtrado.loc[:, 'relevancia'] = df_filtrado['nombre'].apply(
            lambda x: sum(1 for palabra in palabras_busqueda if palabra in x.lower())
        )
        df_filtrado = df_filtrado.sort_values(by='relevancia', ascending=False)

        # Mostrar los productos encontrados
        return df_filtrado[['id', 'nombre', 'precio', 'categoria']]

    def comparar_productos_por_precio(self, producto_id):
        """Compara un producto con otros en función del precio, filtrando por categoría."""
        df = self.obtener_productos()
        producto = df[df['id'] == producto_id]

        if producto.empty:
            print("Producto no encontrado.")
            return

        categoria_producto = producto['categoria'].iloc[0]
        df_categoria = df[df['categoria'] == categoria_producto]

        precio_producto = producto['precio'].iloc[0]
        # Modificar para evitar el SettingWithCopyWarning
        df_categoria.loc[:, 'diferencia_precio'] = abs(df_categoria['precio'] - precio_producto)
        df_sorted = df_categoria.sort_values('diferencia_precio')

        print(f"\nProductos comparados con '{producto['nombre'].iloc[0]}':")
        print(df_sorted[['id', 'nombre', 'precio', 'diferencia_precio']])



    def recomendaciones_similares(self, producto_id):
        """Realiza recomendaciones de productos similares basados en precio y categoría sin depender de palabras clave en el nombre."""
        df = self.obtener_productos()
        producto = df[df['id'] == producto_id]

        if producto.empty:
            print("Producto no encontrado.")
            return

        categoria_producto = producto['categoria'].iloc[0]
        precio_producto = producto['precio'].iloc[0]

        # Filtrar productos de la misma categoría
        df_similares = df[df['categoria'] == categoria_producto]

        # Usar similitud de coseno para comparar productos por precio
        precios = df_similares[['precio']].values
        scaler = StandardScaler()
        precios_normalizados = scaler.fit_transform(precios)

        # Calcular similitud de coseno entre los productos
        similitudes = cosine_similarity(precios_normalizados)

        # Crear un DataFrame con las similitudes
        similitudes_df = pd.DataFrame(similitudes, columns=df_similares['nombre'], index=df_similares['nombre'])

        # Filtrar similitudes no positivas
        similitudes_df = similitudes_df[producto['nombre'].iloc[0]].sort_values(ascending=False)
        similitudes_df = similitudes_df[similitudes_df > 0]  # Solo mostrar similitudes positivas

        print(f"\nRecomendaciones similares a '{producto['nombre'].iloc[0]}':")
        print(similitudes_df)

    def cerrar_conexion(self):
        """Cierra la conexión con la base de datos."""
        self.cursor.close()
        self.conn.close()

# Uso del Agente Inteligente
agente = AgenteInteligente()

# Insertar los nuevos datos de productos ampliados (ropa, camisetas, pantalones)
agente.insertar_datos_ampliados()

# Ingresar el término de búsqueda
termino_busqueda = input("Introduce el término que deseas buscar: ")

# Buscar los productos por palabras clave
productos_encontrados = agente.buscar_producto_por_palabras(termino_busqueda)

if productos_encontrados is not None:
    # Mostrar los productos encontrados
    print(f"\nProductos encontrados para el término '{termino_busqueda}':")
    print(productos_encontrados[['id', 'nombre', 'precio', 'categoria']])

    # Comparar productos por precio (tomamos el primer producto encontrado)
    producto_id = productos_encontrados['id'].iloc[0]
    agente.comparar_productos_por_precio(producto_id)

    # Hacer recomendaciones similares al producto encontrado
    agente.recomendaciones_similares(producto_id)

# Cerrar la conexión
agente.cerrar_conexion()